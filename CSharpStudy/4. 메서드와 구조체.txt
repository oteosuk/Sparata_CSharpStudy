[메서드](함수라고 생각하면됨)
- 메서드란?
    - 메서드(Method)는 일련의 코드 블록으로, 특정한 작업을 수행하기 위해 사용되는 독립적인 기능 단위입니다.
    - 코드의 재사용성과 모듈화를 위해 사용되며, 필요할 때 호출하여 실행됩니다.
- 메서드의 역할과 중요성
    - 코드의 재사용성: 
    메서드를 사용하면 동일한 작업을 반복해서 구현하지 않아도 됩니다. 필요할 때 메서드를 호출하여 작업을 수행할 수 있습니다.
    - 모듈화: 
    메서드를 사용하여 코드를 작은 단위로 분리하고 관리할 수 있습니다. 각 메서드는 특정한 기능을 수행하므로 코드의 구조가 더욱 명확해집니다.
    - 가독성과 유지보수성: 
    메서드를 사용하면 코드가 간결해지고 가독성이 좋아집니다. 또한, 코드 수정이 필요한 경우 해당 메서드만 수정하면 되므로 유지보수가 용이해집니다.
    - 코드의 중복 제거: 
    반복적인 작업을 메서드로 묶어서 사용하면 코드 중복을 방지할 수 있습니다.
    - 코드의 추상화: 
    메서드를 통해 작업 단위를 추상화하고, 메서드 이름을 통해 해당 작업이 어떤 역할을 하는지 파악할 수 있습니다.

===========================================================================================
[메서드 오버로딩](다중정의)
같은 이름 다른 동작의 메서드 오버로딩!
오버로딩은 메서드의 기능이나 작업은 동일하지만 입력값에 따라 다르게 동작해야 할 때 사용됩니다.

void PrintMessage(string message)
{
    Console.WriteLine("Message: " + message);
}

void PrintMessage(int number)
{
    Console.WriteLine("Number: " + number);
}

// 메서드 호출
PrintMessage("Hello, World!");  // 문자열 매개변수를 가진 메서드 호출
PrintMessage(10);  // 정수 매개변수를 가진 메서드 호출

===========================================================================================
[구조체]

struct Person
{
    public string Name;
    public int Age;

    public void PrintInfo()
    {
        Console.WriteLine($"Name: {Name}, Age: {Age}");
    }
}

Person person1;
person1.Name = "John";
person1.Age = 25;
person1.PrintInfo();